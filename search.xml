<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于Java的GUI设计]]></title>
    <url>%2F2020%2F06%2F13%2FJava%E7%9A%84GUI%E8%AE%BE%E8%AE%A1.html</url>
    <content type="text"><![CDATA[在2020的今天，GUI，可能已经是大家耳熟能详的词了。所谓GUI即是用户界面，像我们的QQ，WeChat等等都是以用户界面的形式呈现在我们眼前的。而Java作为一种运用广泛的程序语言，自然在GUI设计上也有其独特之处。下面就以2道常规GUI题来实战一下吧！此次的题目以及代码是我们优秀的冯py同学投稿！大家慢慢欣赏哦！ 题1：创建一个可以移动、改变大小、最大化、且可以关闭的JFrame窗口，并且添加菜单和工具条；设计相应的菜单加速键以及快捷键图标。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124import java.awt.*;import javax.swing.*;import java.awt.event.*;public class test extends JFrame&#123; //定义菜单 JMenuBar mb = new JMenuBar(); //工具栏对象 JToolBar mtb = new JToolBar(); JMenu mFile = new JMenu("文件(F)"); JMenuItem miNew=new JMenuItem("新建(N)",KeyEvent.VK_N), miOpen=new JMenuItem("打开(O)...",KeyEvent.VK_O), miSave=new JMenuItem("保存(S)",KeyEvent.VK_S), miFont=new JMenuItem("字体与颜色(F)...",KeyEvent.VK_F), miQuit=new JMenuItem("退出(X)",KeyEvent.VK_X); //菜单选项 //构造函数 test(String sTitle)&#123; super(sTitle); //添加组件 addMenus(); //设置窗口大小 setSize(500,300); //设置close按钮操作 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //设置工具栏 addToolBar(); //设置输入框 addTextField(); //添加按钮 addButton(); &#125; //添加菜单 private void addMenus() &#123; setJMenuBar(mb); //设置快捷键 miNew.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,InputEvent.CTRL_DOWN_MASK)); miOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_DOWN_MASK|InputEvent.SHIFT_DOWN_MASK)); mFile.add(miNew); //新建 mFile.add(miOpen); //打开 mFile.add(miSave); //保存 mFile.addSeparator(); //分割线 mFile.add(miFont); //字体和颜色 mFile.addSeparator(); //分割线 mFile.add(miQuit); //退出 mb.add(mFile); /*//改变窗口坐标 Toolkit tk = getToolkit();//得到一个Toolkit对象 Image icon = tk.getImage("online.gif"); setIconImage(icon);*/ &#125; //添加工具条 private void addToolBar() &#123; //工具条 Container c = getContentPane(); c.add(BorderLayout.NORTH,mtb); mtb.setLayout(new FlowLayout(FlowLayout.LEFT)); FgButton [] btn = &#123;new FgButton("新建文件"), new FgButton("打开文件"), new FgButton("保存文件")&#125;; for (int i = 0; i &lt; btn.length; i++) &#123; btn[1].setBorder(BorderFactory.createEmptyBorder()); mtb.add(btn[i]); &#125; //设置不可以浮动 mtb.setFloatable(false); &#125; //添加标签和输入框 public void addTextField() &#123; Container c = getContentPane(); c.setLayout(new FlowLayout()); c.add(new JLabel("用户名：")); c.add(new JTextField("",15)); c.add(new JLabel("密 码 ：")); c.add(new JPasswordField("",15)); &#125; //按钮添加 public void addButton() &#123; Container c=getContentPane(); JButton[] ic = &#123;new JButton("登入")&#125;; c.add(ic[0]); &#125; //测试函数 public static void main(String[] args) &#123; //创建窗口对象 test frm = new test("one"); //显示窗口 frm.setVisible(true); &#125; &#125;//自定义按钮class FgButton extends JButton&#123; public FgButton()&#123; super(); &#125; //Icon对象用来引入图片 public FgButton(Icon icon,String strToolTipText)&#123; super(icon); setToolTipText(strToolTipText); &#125; public FgButton(String strToolTipText)&#123; setToolTipText(strToolTipText); &#125;&#125; 题2设计编写登录窗口，该应用程序维护一张记录合法用户名和密码的列表；只有合法的用户才能通过登录程序；需要实现：1）最多尝试3次；2）登录成功推出登录窗口；3）用户名或密码为空时，提示信息；4）用户名和密码错误时，清空密码，并将用户名选中；5）居中显示窗口。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100import javax.swing.*;import java.awt.event.*;import java.util.*;import java.awt.*;public class TestTextField extends JFrame implements ActionListener&#123; JTextField t0,t1; JButton jb; int count=3; Map&lt;String, Integer&gt; map=new HashMap&lt;String,Integer&gt;(); //构造函数 public TestTextField(String xTitle)&#123; super(xTitle); //为窗口设置名字 setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setSize(250,200); //设置窗口大小 Container c=getContentPane(); //获得窗口容器 c.setLayout(new GridLayout(3,1)); // 为容器设置布局 //用户名panel JPanel panel1=new JPanel(); //创建小容器 panel1.setLayout(new FlowLayout(FlowLayout.CENTER));//设置小容器的布局 panel1.add(new JLabel("用户名:")); //添加标签 t0=new JTextField("",15); panel1.add(t0); //添加输入框 c.add(panel1); //把小容器放到大容器中 //密码panel JPanel panel2=new JPanel(); //创建小容器 panel2.setLayout(new FlowLayout(FlowLayout.CENTER));//设置小容器的布局 panel2.add(new JLabel("密 码:")); //添加标签 t1=new JPasswordField("",15); panel2.add(t1); //添加输入框 c.add(panel2); //把小容器放到大容器中 //登录按钮panel JPanel panel3=new JPanel(); //创建小容器 panel3.setLayout(new FlowLayout(FlowLayout.RIGHT));//设置小容器的布局 jb=new JButton("登录"); jb.addActionListener(this); //注册监听者 panel3.add(jb); //添加按钮 c.add(panel3); //把小容器放到大容器中 setVisible(true); //设置可见 map.put("cpt",123456); //列表初始化 map.put("fpy",123456); &#125; //接口函数实现 public void actionPerformed(ActionEvent e) &#123; count--; //测试次数减一 if(count==0) &#123; //若尝试次数超过3次 System.out.println("你没机会了"); System.exit(0); &#125; String name=null; int password=0; try &#123; //获得用户输入 name=t0.getText(); password=Integer.parseInt(t1.getText()); &#125; catch(NumberFormatException ex)&#123; ex.printStackTrace(); &#125; String message=test(name, password);//用户名检验 JOptionPane.showMessageDialog(null,message,"信息提示",JOptionPane.INFORMATION_MESSAGE); //输出提示框 &#125; //检验用户函数 private String test(String name, int password) &#123; //使用Map内部接口Entry进行迭代 for(Map.Entry&lt;String, Integer&gt; entry: map.entrySet()) &#123; String key = entry.getKey(); int value = entry.getValue(); if(key.equals(name))&#123; if("0".equals(String.valueOf(password)) )&#123; return "用户名或密码为空,还有" + count + "次机会"; &#125; else if (!(password == value))&#123; t1.setText(""); return "密码错误,还有" + count + "次机会"; &#125; else &#123; System.out.println("登录成功"); System.exit(0); &#125; &#125; &#125; t1.setText(""); //清空密码 return "用户名是非法的,还有" + count + "次机会"; &#125; //测试函数 public static void main(String[] args) &#123; TestTextField a=new TestTextField("登入界面"); &#125;&#125; 大致效果是酱紫哒！]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java常用类实战]]></title>
    <url>%2F2020%2F06%2F05%2FJava%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%AE%9E%E6%88%98.html</url>
    <content type="text"><![CDATA[ArrayList类题：假设52张扑克牌（去掉大小王），实现随机洗牌操作，为参加游戏的人每人生成一手牌，每手牌的牌数是指定的，并将每个人分到的牌按花色排序后输出。 1234567891011121314151617181920212223242526272829303132import java.util.*;public class TestDealCard &#123; public static void main(String[] args) &#123; int numHands=4; int cardsPerHand=12; String[] suit= &#123;"♠","♣","♥","♦"&#125;; String[] rank= &#123;"A","1","2","3","4","5","6","7","8","9","10","J","Q","K"&#125;; List deck = new ArrayList(); for(int i=0;i&lt;suit.length;i++) &#123; for(int j=0;j&lt;rank.length;j++) &#123; deck.add(suit[i]+rank[j]); &#125; &#125; Collections.shuffle(deck); for(int i=0;i&lt;numHands;i++) &#123; List p=dealCard(deck, cardsPerHand); Collections.sort(p); System.out.println(deck); &#125; &#125; public static List dealCard(List deck, int n) &#123; int deckSize=deck.size(); List handView=deck.subList(deckSize-n, deckSize); List hand=new ArrayList(handView); handView.clear(); return hand; &#125;&#125; LinkList类题：用LinkList写一个Stack的数据结构测试。 12345678910111213141516171819202122232425262728293031323334353637import java.util.*;public class TestStack &#123; //创建链表linkList LinkedList linkList=new LinkedList&lt;Object&gt;(); public void push(Object obj) &#123; linkList.addLast(obj); &#125; public void clear() &#123; linkList.clear(); &#125; public boolean isEmpty() &#123; return linkList.isEmpty(); &#125; public int getSize() &#123; return linkList.size(); &#125; public Object pop() &#123; if(!linkList.isEmpty()) return linkList.removeLast(); return "栈内无数"; &#125; public static void main(String[] args) &#123; TestStack myStack=new TestStack(); myStack.push(3); myStack.push(4); myStack.push(5); System.out.println(myStack.pop()); System.out.println(myStack.pop()); &#125;&#125; Vector类题：写一个简单的Vector测试。 123456789101112131415161718192021import java.util.*;public class TestVector &#123; public static void main(String[] args) &#123; Vector v=new Vector(4); v.add("J"); v.add("A"); v.add("J"); v.add("E"); v.add("L"); v.remove("J"); v.remove(0); int size=v.size(); System.out.println("Size:"+size); for(int i=0;i&lt;size;i++) &#123; System.out.println(v.get(i)); &#125; &#125;&#125; 题：演示一个简单的学生信息管理：利用向量记录实现学生管理，能支持学生对象的增加、删除操作，每个学生对象包括学号，性别，姓名。删除学生必须输入学生的学号。可以设计一个操作菜单，包括增加，删除，显示以及退出4项。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import java.util.*;import java.io.*;public class Student &#123; String name; long stno; String sex; public Student(String name,long stno,String sex) &#123; this.name=name; this.stno=stno; this.sex=sex; &#125; public String toString() &#123; return "姓名:"+name+",学号:"+stno+",性别:"+sex; &#125; public static void main(String[] args) &#123; Vector&lt;Student&gt; group=new Vector&lt;Student&gt;(); outer: while(true) &#123; String ch=input("选择：1--增加，2--删除，3--显示，4--退出"); int choice=Integer.parseInt(ch); switch(choice) &#123; case 1: group.add(inputStudent()); break; case 2: long stno=Long.parseLong(input("请输入学号:")); for(int k=0;k&lt;group.size();k++) &#123; Student x=(Student)group.get(k); if(x.stno==stno) group.removeElement(x); &#125; break; case 3: //迭代输出Vector存储 Iterator p=group.iterator(); while(p.hasNext())&#123; System.out.println("==&gt;"+p.next()); &#125; break; case 4: break outer; &#125; &#125; &#125; public static String input(String hint) &#123; String x=null; try &#123; //字符串输入 BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); System.out.println(hint); x=br.readLine(); &#125; catch(IOException e) &#123;&#125; return x; &#125; public static Student inputStudent() &#123; String name=input("请输入姓名:"); long stno=Long.parseLong(input("请输入学号:")); String sex=input("请输入性别:"); return new Student(name,stno,sex); &#125;&#125; Map类题：写一个测试映射集合的代码。 123456789101112131415161718192021222324252627import java.util.*;public class TestTreeMap &#123; public static void main(String[] args) &#123; Map map=new HashMap(); map.put("c","ccc"); map.put("a","aaa"); map.put("b","bbb"); map.put("d","ddd"); Iterator iter=map.keySet().iterator(); while(iter.hasNext()) &#123; Object key=iter.next(); System.out.println("tab key"+key.toString()+"value="+map.get(key)); &#125; TreeMap tab=new TreeMap(); tab.put("c","ccc"); tab.put("a","aaa"); tab.put("b","bbb"); tab.put("d","ddd"); Iterator iter2=tab.keySet().iterator(); while(iter2.hasNext()) &#123; Object key=iter2.next(); System.out.println("map key"+key.toString()+"value="+tab.get(key)); &#125; &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorBoard实战]]></title>
    <url>%2F2020%2F06%2F05%2FTensorBoard%E5%AE%9E%E6%88%98.html</url>
    <content type="text"><![CDATA[今天我们来介绍一款机器学习中很实用的工具：TensorBoard。它之所以实用，主要是因为它将机器学习这一个类似黑盒的东西可视化出来，让用户对训练过程有一个更好的理解。下面就基于MNIST数据集来实战一下TensorBoard的使用方法。 TensorBoard可视化MNIST分类代码1234567891011121314151617181920212223242526272829303132333435363738import numpy as npfrom keras.layers import Input, Dense, Dropout, Activation, Conv2D, MaxPool2D, Flattenfrom keras.datasets import mnistfrom keras.models import Modelfrom keras.utils import to_categoricalfrom keras.callbacks import TensorBoardif __name__ == '__main__': #数据集处理 data = np.load('mnist.npz') x_train, y_train = data['x_train'], data['y_train'] x_test, y_test = data['x_test'], data['y_test'] x_train = np.expand_dims(x_train, axis=-1) x_test = np.expand_dims(x_test, axis=-1) y_train=to_categorical(y_train, num_classes=10) y_test=to_categorical(y_test, num_classes=10) #参数配置 batch_size =128 epoch = 10 # 模型搭建 inputs = Input([28, 28, 1]) x = Conv2D(32, (5, 5), activation='relu' )(inputs) x = Conv2D(64, (5, 5), activation='relu')(x) x = MaxPool2D(pool_size=(2, 2))(x) x = Flatten()(x) x = Dense(128, activation='relu')(x) x = Dropout(0.5)(x) x = Dense(10, activation='softmax')(x) model = Model(inputs, x) #模型编译 model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['acc']) #面板配置 Tensorboard = TensorBoard(log_dir='.\model', histogram_freq=1, write_grads=True) #log_dir保存目录 #模型训练 result = model.fit(x_train, y_train, batch_size=batch_size, epochs=epoch, shuffle=True, validation_split=0.2,callbacks=[Tensorboard]) #在回调函数中加入TensorBoard！ TensorBoard启动实际上，训练信息已经保存在TensorBoard配置的目录中了。下面进入当前*.py目录下的PowerShell，敲入 1tensorboard --logdir= XXX（前文中的model） PowerShell会反馈一个本地6006端口开放的提示信息。此时打开浏览器输入 1http://localhost:6006 这样就成功进入TensorBoard界面啦！ TensorBoard配置我们上述实战例子中，我们只能够看到Loss和Acc的训练曲线，而其他信息是没有保存下来的。但世界上TensorBoard的可视化功能非常强大，目前可以支持一下7种可视化类别： SCALARS：展示训练过程中的准确率、损失值、权重/偏置的变化情况 IMAGES：展示训练过程中及记录的图像 AUDIO：展示训练过程中记录的音频 GRAPHS：展示模型的数据流图，以及各个设备上消耗的内存和时间 DISTRIBUTIONS：展示训练过程中记录的数据的分布图 HISTOGRAMS：展示训练过程中记录的数据的柱状图 EMBEDDINGS：展示词向量后的投影分布 具体的参数配置后续再加~ 参考文献： https://blog.csdn.net/fendouaini/article/details/80368770?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase https://blog.csdn.net/u010099080/article/details/77426577 https://blog.csdn.net/hnwolfs/article/details/81122380?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1]]></content>
      <categories>
        <category>Keras</category>
      </categories>
      <tags>
        <tag>Tensorboard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[screen常用命令]]></title>
    <url>%2F2020%2F06%2F05%2Fscreen%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[​ 想必在Linux云服务器上跑过代码的同学都会有这样子的苦恼：我们通过SSH访问云服务器，将我们需要执行的代码在服务器上运行，但当你断开SSH连接后，你的代码也会随之停止运行。此时你可能开始寻找一种即使SSH离线也能让服务器运行目标代码的方法。这种方法确实存在，那就是下面提到的：screen（窗口）。这个东西实际上可以这样理解：我们通过SSH连接服务器，这时相当于开了一个主窗口。而我们关闭SSH连接后，这个主窗口也就关闭了，所以运行于主窗口的代码也就这样挂掉了。而通过screen操作相当于通过主窗口创建子窗口，主窗口湮灭了但子窗口还是存在的，所以将我们的目标代码放在子窗口运行便能够解决我们上述提到的无法离线运行的问题。 下面就介绍几种screen最常见的操作： screen创建1screen -S ###（窗口名） screen列表查看1screen -ls screen恢复1screen -r ###（窗口名） screen删除1screen -S ###(窗口名) -X quit screen恢复异常12screen -d ###（窗口名）screen -r ###（窗口名） screen返回主窗口1Ctrl + A + D]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>screen</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础练习]]></title>
    <url>%2F2020%2F06%2F01%2FJava%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[时间之矢稍纵即逝，接近2周就要Java期末考了。作为一个一学期没怎么认真听Java课的我来说，内心波澜起伏。借着空余的时间，把Java的重点稍微总结了一下，下面就以涵盖全书的4个例子展开。 题1(数组)：使用Scanner输入n个数(小于100)，并将之升序输出。 1234567891011121314151617import java.util.Scanner;import java.util.Arrays;public class haha &#123; public static void main(String[] args)&#123; Scanner reader = new Scanner(System.in); int n = reader.nextInt(); float[] xiang = new float[n]; for(int i=0;i&lt;n;i++) &#123; xiang[i] = reader.nextFloat(); &#125; Arrays.sort(xiang); for(int i=0;i&lt;n;i++) &#123; System.out.println(xiang[i]); &#125; &#125;&#125; 题2(继承)：（1）编写一个圆类Circle，该类拥有：①一个成员变量Radius（私有，浮点型）； // 存放圆的半径；②两个构造方法 Circle( ) // 将半径设为0 Circle(double r ) //创建Circle对象时将半径初始化为r③ 三个成员方法 double getArea( ) //获取圆的面积 double getPerimeter( ) //获取圆的周长 void show( ) //将圆的半径、周长、面积输出到屏幕（2）编写一个圆柱体类Cylinder，它继承于上面的Circle类。还拥有：①一个成员变量 double hight（私有，浮点型）； // 圆柱体的高；②构造方法 Cylinder (double r, double h ) //创建Circle对象时将半径初始化为r③ 成员方法 double getVolume( ) //获取圆柱体的体积 void showVolume( ) //将圆柱体的体积输出到屏幕编写应用程序，创建类的对象，分别设置圆的半径、圆柱体的高，计算并分别显示圆半径、圆面积、圆周长，圆柱体的体积。 Circle.java: 12345678910111213141516171819202122232425public class Circle &#123; private double Radius; public Circle() &#123; Radius=0; &#125; public Circle(double r) &#123; Radius=r; &#125; public double getArea()&#123; return Math.PI*Math.pow(Radius, 2); &#125; public double getPerimeter()&#123; return 2*Math.PI*Radius; &#125; public void show() &#123; System.out.println("圆半径："+Radius); System.out.println("圆面积："+this.getArea()); System.out.println("圆周长:"+this.getPerimeter()); &#125;&#125; Cylinder.java 12345678910111213141516171819202122public class Cylinder extends Circle &#123; private double hight; public Cylinder(double r,double h)&#123; super(r); hight = h; &#125; public double getVolume()&#123; return super.getArea()*hight; &#125; public void showVolume()&#123; System.out.println("圆柱体体积："+this.getVolume()); &#125; public static void main(String[] args) &#123; Cylinder obj = new Cylinder(1,1); obj.show(); obj.showVolume(); &#125;&#125; 题3(抽象类)1.设计Person抽象类，具有年龄、性别、体重、身高等属性，其中年龄、性别为一般方法，体重、身高为抽象方法； 2.在Person抽象类基础上，进一步派生Teacher类，包含工号、系别等信息； 3.设计Teacher测试运行例子，输出相应信息。 Person.java 123456public abstract class Person &#123; void setAge() &#123;&#125; void setSex() &#123;&#125; abstract void setWeight(double weight); abstract void setHeight(double height);&#125; Teacher.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class Teacher extends Person&#123; private int age; private String sex; private double weight; private double height; private String document; private String number; Teacher() &#123; age = 0; sex = "x"; document = "xxx"; number = "xxxx"; height = 0; weight = 0; &#125; void setWeight(double w) &#123; weight = w; &#125; void setHeight(double h) &#123; height = h; &#125; void setAge(int a) &#123; age = a; &#125; void setSex(String s) &#123; sex = s; &#125; void setDocument(String s) &#123; document = s; &#125; void setNumber(String s) &#123; number = s; &#125; void show() &#123; System.out.println("teacher"); System.out.println("-------------------------"); System.out.println("age:"+age); System.out.println("sex:"+sex); System.out.println("height:"+height); System.out.println("weight:"+weight); System.out.println("doucument:"+document); System.out.println("number:"+number); &#125; //测试 public static void main(String[] args) &#123; Teacher t = new Teacher(); t.setAge(4); t.setSex("男"); t.setHeight(183.2); t.setWeight(42.5); t.setDocument("自动化"); t.setNumber("1801"); t.show(); &#125;&#125; 题4(接口)： 设计Person接口，具有获取和设置年龄、性别、体重、身高等属性的方法 设计Teacher类实现Person接口，包含工号、系别等信息；实现信息输出功能； 设计Student类实现Person接口，包含学号信息；实现输出功能； 设计Student、Tercher测试运行类，体现接口的应用 Person.java 1234567891011public interface Person &#123; void setAge(int age); int getaAge(); void setSex(String sex); String getSex(); void setHeight(double height); double getHeight(); void setWeight(double W); double getWeight(); void show();&#125; Teacher.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374public class Teacher implements Person&#123; private int age; private String sex; private String document; private String number; private double height; private double weight; Teacher()&#123; age=0; sex="x"; document="xxx"; number="xxxx"; height=0; weight=0; &#125; public void setAge(int a) &#123; age =a; &#125; public int getAge() &#123; return age; &#125; public void setSex(String s) &#123; sex = s; &#125; public String getSex() &#123; return sex; &#125; public void setHeight(double h) &#123; height=h; &#125; public double getHeight() &#123; return height; &#125; public void setWeight(double w) &#123; weight = w; &#125; public double getWeight() &#123; return weight; &#125; public void setDocument(String d) &#123; document=d; &#125; public void setNumber(String n) &#123; number = n; &#125; public String getNumber() &#123; return number; &#125; public String getDocument() &#123; return document; &#125; public void show() &#123; System.out.println("teacher"); System.out.println("----------------------"); System.out.println("age:"+age); System.out.println("sex:"+sex); System.out.println("height:"+height); System.out.println("weight:"+weight); System.out.println("number:"+number); System.out.println("document:"+document); &#125; public static void main(String[] args) &#123; Teacher t = new Teacher(); t.setAge(123); System.out.println("age:"+t.getAge()); t.setSex("男"); System.out.println("sex:"+t.getSex()); t.setHeight(123.4); System.out.println("heght:"+t.getHeight()); t.show(); &#125;&#125; 还剩下Student类，就…就自行解决吧！毕竟道理都是相通的啦！]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[conda常用命令]]></title>
    <url>%2F2020%2F05%2F29%2Fconda%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[conda可以说是每个学习python的人都应该了解的。当我们安装python包，或者创建环境的时候都会和它打交道。为了帮助大家对conda有一个更好的了解，下面总结了一些关于conda的命令行操作。主要是关于conda换源问题以及conda虚拟环境操作问题。那下面就开始吧！.0.0. window环境下conda查包1conda list conda配置情况查询1conda info conda换源123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes conda换回默认源1conda config --remove-key channels conda虚拟环境创建1conda create -n your_env_name python=X.X conda虚拟环境激活1activate your_env_name(虚拟环境名称) conda查询环境信息1conda env list conda关闭虚拟环境1deactivate conda删除虚拟环境1conda remove -n your_env_name(虚拟环境名称) --all conda删除虚拟环境中的某些包1conda remove --name your_env_name package_name Linux环境下如果与windows环境下操作方式相同的，则以下不再赘述。 conda虚拟环境激活1source activate your_env_name(虚拟环境名称) conda关闭虚拟环境1source deactivate conda换源在终端输入： 1vim ~/.condarc 这样就进入了conda源的配置文件了。下面（选择其一就好）将文件改为： 清华源： 123456channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ssl_verify: true 中科大源： 12345channels: - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/ - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/ - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/ssl_verify: true 上交源： 12345channels: - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/ - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/ - https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/ssl_verify: true 参考文献： https://zhuanlan.zhihu.com/p/87123943 https://blog.csdn.net/sean2100/article/details/80998643 https://blog.csdn.net/lyy14011305/article/details/59500819 https://blog.csdn.net/weixin_34613450/article/details/87457631]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>conda命令行</tag>
      </tags>
  </entry>
</search>
