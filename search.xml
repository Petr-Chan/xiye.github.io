<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java常用类实战]]></title>
    <url>%2F2020%2F06%2F05%2FJava%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%AE%9E%E6%88%98.html</url>
    <content type="text"><![CDATA[ArrayList类题：假设52张扑克牌（去掉大小王），实现随机洗牌操作，为参加游戏的人每人生成一手牌，每手牌的牌数是指定的，并将每个人分到的牌按花色排序后输出。 1234567891011121314151617181920212223242526272829303132import java.util.*;public class TestDealCard &#123; public static void main(String[] args) &#123; int numHands=4; int cardsPerHand=12; String[] suit= &#123;"♠","♣","♥","♦"&#125;; String[] rank= &#123;"A","1","2","3","4","5","6","7","8","9","10","J","Q","K"&#125;; List deck = new ArrayList(); for(int i=0;i&lt;suit.length;i++) &#123; for(int j=0;j&lt;rank.length;j++) &#123; deck.add(suit[i]+rank[j]); &#125; &#125; Collections.shuffle(deck); for(int i=0;i&lt;numHands-3;i++) &#123; List p=dealCard(deck, cardsPerHand); Collections.sort(p); System.out.println(deck); &#125; &#125; public static List dealCard(List deck, int n) &#123; int deckSize=deck.size(); List handView=deck.subList(deckSize-n, deckSize); List hand=new ArrayList(handView); handView.clear(); return hand; &#125;&#125; LinkList类题：用LinkList写一个Stack的数据结构测试。 12345678910111213141516171819202122232425262728293031323334353637import java.util.*;public class TestStack &#123; //创建链表linkList LinkedList linkList=new LinkedList&lt;Object&gt;(); public void push(Object obj) &#123; linkList.addLast(obj); &#125; public void clear() &#123; linkList.clear(); &#125; public boolean isEmpty() &#123; return linkList.isEmpty(); &#125; public int getSize() &#123; return linkList.size(); &#125; public Object pop() &#123; if(!linkList.isEmpty()) return linkList.removeLast(); return "栈内无数"; &#125; public static void main(String[] args) &#123; TestStack myStack=new TestStack(); myStack.push(3); myStack.push(4); myStack.push(5); System.out.println(myStack.pop()); System.out.println(myStack.pop()); &#125;&#125; Vector类题：写一个简单的Vector测试。 123456789101112131415161718192021import java.util.*;public class TestVector &#123; public static void main(String[] args) &#123; Vector v=new Vector(4); v.add("J"); v.add("A"); v.add("J"); v.add("E"); v.add("L"); v.remove("J"); v.remove(0); int size=v.size(); System.out.println("Size:"+size); for(int i=0;i&lt;size;i++) &#123; System.out.println(v.get(i)); &#125; &#125;&#125; 题：演示一个简单的学生信息管理：利用向量记录实现学生管理，能支持学生对象的增加、删除操作，每个学生对象包括学号，性别，姓名。删除学生必须输入学生的学号。可以设计一个操作菜单，包括增加，删除，显示以及退出4项。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import java.util.*;import java.io.*;public class Student &#123; String name; long stno; String sex; public Student(String name,long stno,String sex) &#123; this.name=name; this.stno=stno; this.sex=sex; &#125; public String toString() &#123; return "姓名:"+name+",学号:"+stno+",性别:"+sex; &#125; public static void main(String[] args) &#123; Vector&lt;Student&gt; group=new Vector&lt;Student&gt;(); outer: while(true) &#123; String ch=input("选择：1--增加，2--删除，3--显示，4--退出"); int choice=Integer.parseInt(ch); switch(choice) &#123; case 1: group.add(inputStudent()); break; case 2: long stno=Long.parseLong(input("请输入学号:")); for(int k=0;k&lt;group.size();k++) &#123; Student x=(Student)group.get(k); if(x.stno==stno) group.removeElement(x); &#125; break; case 3: //迭代输出Vector存储 Iterator p=group.iterator(); while(p.hasNext())&#123; System.out.println("==&gt;"+p.next()); &#125; break; case 4: break outer; &#125; &#125; &#125; public static String input(String hint) &#123; String x=null; try &#123; //字符串输入 BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); System.out.println(hint); x=br.readLine(); &#125; catch(IOException e) &#123;&#125; return x; &#125; public static Student inputStudent() &#123; String name=input("请输入姓名:"); long stno=Long.parseLong(input("请输入学号:")); String sex=input("请输入性别:"); return new Student(name,stno,sex); &#125;&#125; Map类题：写一个测试映射集合的代码。 123456789101112131415161718192021222324252627import java.util.*;public class TestTreeMap &#123; public static void main(String[] args) &#123; Map map=new HashMap(); map.put("c","ccc"); map.put("a","aaa"); map.put("b","bbb"); map.put("d","ddd"); Iterator iter=map.keySet().iterator(); while(iter.hasNext()) &#123; Object key=iter.next(); System.out.println("tab key"+key.toString()+"value="+map.get(key)); &#125; TreeMap tab=new TreeMap(); tab.put("c","ccc"); tab.put("a","aaa"); tab.put("b","bbb"); tab.put("d","ddd"); Iterator iter2=tab.keySet().iterator(); while(iter2.hasNext()) &#123; Object key=iter2.next(); System.out.println("map key"+key.toString()+"value="+tab.get(key)); &#125; &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorBoard实战]]></title>
    <url>%2F2020%2F06%2F05%2FTensorBoard%E5%AE%9E%E6%88%98.html</url>
    <content type="text"><![CDATA[今天我们来介绍一款机器学习中很实用的工具：TensorBoard。它之所以实用，主要是因为它将机器学习这一个类似黑盒的东西可视化出来，让用户对训练过程有一个更好的理解。下面就基于MNIST数据集来实战一下TensorBoard的使用方法。 TensorBoard可视化MNIST分类代码1234567891011121314151617181920212223242526272829303132333435363738import numpy as npfrom keras.layers import Input, Dense, Dropout, Activation, Conv2D, MaxPool2D, Flattenfrom keras.datasets import mnistfrom keras.models import Modelfrom keras.utils import to_categoricalfrom keras.callbacks import TensorBoardif __name__ == '__main__': #数据集处理 data = np.load('mnist.npz') x_train, y_train = data['x_train'], data['y_train'] x_test, y_test = data['x_test'], data['y_test'] x_train = np.expand_dims(x_train, axis=-1) x_test = np.expand_dims(x_test, axis=-1) y_train=to_categorical(y_train, num_classes=10) y_test=to_categorical(y_test, num_classes=10) #参数配置 batch_size =128 epoch = 10 # 模型搭建 inputs = Input([28, 28, 1]) x = Conv2D(32, (5, 5), activation='relu' )(inputs) x = Conv2D(64, (5, 5), activation='relu')(x) x = MaxPool2D(pool_size=(2, 2))(x) x = Flatten()(x) x = Dense(128, activation='relu')(x) x = Dropout(0.5)(x) x = Dense(10, activation='softmax')(x) model = Model(inputs, x) #模型编译 model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['acc']) #面板配置 Tensorboard = TensorBoard(log_dir='.\model', histogram_freq=1, write_grads=True) #log_dir保存目录 #模型训练 result = model.fit(x_train, y_train, batch_size=batch_size, epochs=epoch, shuffle=True, validation_split=0.2,callbacks=[Tensorboard]) #在回调函数中加入TensorBoard！ TensorBoard启动实际上，训练信息已经保存在TensorBoard配置的目录中了。下面进入当前*.py目录下的PowerShell，敲入 1tensorboard --logdir= XXX（前文中的model） PowerShell会反馈一个本地6006端口开放的提示信息。此时打开浏览器输入 1http://localhost:6006 这样就成功进入TensorBoard界面啦！ TensorBoard配置我们上述实战例子中，我们只能够看到Loss和Acc的训练曲线，而其他信息是没有保存下来的。但世界上TensorBoard的可视化功能非常强大，目前可以支持一下7种可视化类别： SCALARS：展示训练过程中的准确率、损失值、权重/偏置的变化情况 IMAGES：展示训练过程中及记录的图像 AUDIO：展示训练过程中记录的音频 GRAPHS：展示模型的数据流图，以及各个设备上消耗的内存和时间 DISTRIBUTIONS：展示训练过程中记录的数据的分布图 HISTOGRAMS：展示训练过程中记录的数据的柱状图 EMBEDDINGS：展示词向量后的投影分布 具体的参数配置后续再加~ 参考文献： https://blog.csdn.net/fendouaini/article/details/80368770?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase https://blog.csdn.net/u010099080/article/details/77426577 https://blog.csdn.net/hnwolfs/article/details/81122380?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1]]></content>
      <categories>
        <category>Keras</category>
      </categories>
      <tags>
        <tag>Tensorboard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[screen教程]]></title>
    <url>%2F2020%2F06%2F05%2Fscreen%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[​ 想必在Linux云服务器上跑过代码的同学都会有这样子的苦恼：我们通过SSH访问云服务器，将我们需要执行的代码在服务器上运行，但当你断开SSH连接后，你的代码也会随之停止运行。此时你可能开始寻找一种即使SSH离线也能让服务器运行目标代码的方法。这种方法确实存在，那就是下面提到的：screen（窗口）。这个东西实际上可以这样理解：我们通过SSH连接服务器，这时相当于开了一个主窗口。而我们关闭SSH连接后，这个主窗口也就关闭了，所以运行于主窗口的代码也就这样挂掉了。而通过screen操作相当于通过主窗口创建子窗口，主窗口湮灭了但子窗口还是存在的，所以将我们的目标代码放在子窗口运行便能够解决我们上述提到的无法离线运行的问题。 下面就介绍几种screen最常见的操作： screen创建1screen -S ###（窗口名） screen列表查看1screen -ls screen恢复1screen -r ###（窗口名） screen删除1screen -S ###(窗口名) -X quit screen恢复异常12screen -d ###（窗口名）screen -r ###（窗口名） screen返回主窗口1Ctrl + A + D]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>screen</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[conda基本操作]]></title>
    <url>%2F2020%2F05%2F29%2Fconda%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[conda可以说是每个学习python的人都应该了解的。当我们安装python包，或者创建环境的时候都会和它打交道。为了帮助大家对conda有一个更好的了解，下面总结了一些关于conda的命令行操作。主要是关于conda换源问题以及conda虚拟环境操作问题。那下面就开始吧！.0.0. window环境下conda查包1conda list conda配置情况查询1conda info conda换源123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes conda换回默认源1conda config --remove-key channels conda虚拟环境创建1conda create -n your_env_name python=X.X conda虚拟环境激活1activate your_env_name(虚拟环境名称) conda查询环境信息1conda env list conda关闭虚拟环境1deactivate conda删除虚拟环境1conda remove -n your_env_name(虚拟环境名称) --all conda删除虚拟环境中的某些包1conda remove --name your_env_name package_name Linux环境下如果与windows环境下操作方式相同的，则以下不再赘述。 conda虚拟环境激活1source activate your_env_name(虚拟环境名称) conda关闭虚拟环境1source deactivate conda换源在终端输入： 1vim ~/.condarc 这样就进入了conda源的配置文件了。下面（选择其一就好）将文件改为： 清华源： 123456channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ssl_verify: true 中科大源： 12345channels: - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/ - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/ - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/ssl_verify: true 上交源： 12345channels: - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/ - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/ - https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/ssl_verify: true 参考文献： https://zhuanlan.zhihu.com/p/87123943 https://blog.csdn.net/sean2100/article/details/80998643 https://blog.csdn.net/lyy14011305/article/details/59500819 https://blog.csdn.net/weixin_34613450/article/details/87457631]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>conda命令行</tag>
      </tags>
  </entry>
</search>
